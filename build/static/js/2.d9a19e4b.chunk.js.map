{"version":3,"sources":["..\\static\\js\\2.d9a19e4b.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\sets.js"],"names":["webpackJsonp","287","module","exports","Blockly","Blocks","init","this","setHelpUrl","Msg","LISTS_CREATE_WITH_HELPURL","setColour","lists","HUE","itemCount_","updateShape_","setOutput","setInputsInline","setTooltip","LISTS_CREATE_WITH_TOOLTIP","mutationToDom","container","document","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","PLUS_MINUS_updateShape","Python","block","elements","Array","console","log","i","valueToCode","ORDER_NONE","join","ORDER_ATOMIC","JavaScript"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,GCFxBC,QAAAC,OAAA,YAKAC,KAAA,WACAC,KAAAC,WAAAJ,QAAAK,IAAAC,2BACAH,KAAAI,UAAAP,QAAAC,OAAAO,MAAAC,KACAN,KAAAO,WAAA,EACAP,KAAAQ,eACAR,KAAAS,WAAA,SACAT,KAAAU,iBAAA,GACAV,KAAAW,WAAAd,QAAAK,IAAAU,4BAOAC,cAAA,WACA,GAAAC,GAAAC,SAAAC,cAAA,WAEA,OADAF,GAAAG,aAAA,QAAAjB,KAAAO,YACAO,GAOAI,cAAA,SAAAC,GACAnB,KAAAO,WAAAa,SAAAD,EAAAE,aAAA,aACArB,KAAAQ,gBAOAA,aAAAc,uBAAA,wBAEAzB,QAAA0B,OAAA,oBAAAC,GAEA,GAAAC,GAAA,GAAAC,OAAAF,EAAAjB,WACAoB,SAAAC,IAAAJ,EAAAjB,WACA,QAAAsB,GAAA,EAAiBA,EAAAL,EAAAjB,WAAsBsB,IACvCJ,EAAAI,GAAAhC,QAAA0B,OAAAO,YAAAN,EAAA,MAAAK,EACAhC,QAAA0B,OAAAQ,aAAA,KAGA,QADA,IAAeN,EAAAO,KAAA,UACfnC,QAAA0B,OAAAU,eAIApC,QAAAqC,WAAA,oBAAAV,GAEA,GAAAC,GAAA,GAAAC,OAAAF,EAAAjB,WACAoB,SAAAC,IAAAJ,EAAAjB,WACA,QAAAsB,GAAA,EAAiBA,EAAAL,EAAAjB,WAAsBsB,IACvCJ,EAAAI,GAAAhC,QAAAqC,WAAAJ,YAAAN,EAAA,MAAAK,EACAhC,QAAAqC,WAAAH,aAAA,KAGA,QADA,QAAAN,EAAAO,KAAA,WACAnC,QAAAqC,WAAAD","file":"static/js/2.d9a19e4b.chunk.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 287:\n/***/ (function(module, exports) {\n\n\nBlockly.Blocks['set_create'] = {\n  /**\n   * Block for creating a list with any number of elements of any type.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg.LISTS_CREATE_WITH_HELPURL);\n    this.setColour(Blockly.Blocks.lists.HUE);\n    this.itemCount_ = 3;\n    this.updateShape_();\n    this.setOutput(true, 'Set');\n    this.setInputsInline(true);\n    this.setTooltip(Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP);\n  },\n  /**\n   * Create XML to represent list inputs.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function() {\n    var container = document.createElement('mutation');\n    container.setAttribute('items', this.itemCount_);\n    return container;\n  },\n  /**\n   * Parse XML to restore the list inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function(xmlElement) {\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n    this.updateShape_();\n  },\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape_: PLUS_MINUS_updateShape('ADD', \"create set of\")\n};\nBlockly.Python['set_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  console.log(block.itemCount_)\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.Python.valueToCode(block, 'ADD' + i,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = '{' + elements.join(', ') + '}';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n// TODO: Add this to our JavaScript function library\n// https://gist.github.com/nitsas/8acc439168ad610b7286abf34c1242d3\nBlockly.JavaScript['set_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  console.log(block.itemCount_)\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.JavaScript.valueToCode(block, 'ADD' + i,\n        Blockly.JavaScript.ORDER_NONE) || '___';\n  }\n  var code = 'set([' + elements.join(', ') + '])';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/2.d9a19e4b.chunk.js","\nBlockly.Blocks['set_create'] = {\n  /**\n   * Block for creating a list with any number of elements of any type.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg.LISTS_CREATE_WITH_HELPURL);\n    this.setColour(Blockly.Blocks.lists.HUE);\n    this.itemCount_ = 3;\n    this.updateShape_();\n    this.setOutput(true, 'Set');\n    this.setInputsInline(true);\n    this.setTooltip(Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP);\n  },\n  /**\n   * Create XML to represent list inputs.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function() {\n    var container = document.createElement('mutation');\n    container.setAttribute('items', this.itemCount_);\n    return container;\n  },\n  /**\n   * Parse XML to restore the list inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function(xmlElement) {\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n    this.updateShape_();\n  },\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape_: PLUS_MINUS_updateShape('ADD', \"create set of\")\n};\nBlockly.Python['set_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  console.log(block.itemCount_)\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.Python.valueToCode(block, 'ADD' + i,\n        Blockly.Python.ORDER_NONE) || '___';\n  }\n  var code = '{' + elements.join(', ') + '}';\n  return [code, Blockly.Python.ORDER_ATOMIC];\n};\n// TODO: Add this to our JavaScript function library\n// https://gist.github.com/nitsas/8acc439168ad610b7286abf34c1242d3\nBlockly.JavaScript['set_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n  var elements = new Array(block.itemCount_);\n  console.log(block.itemCount_)\n  for (var i = 0; i < block.itemCount_; i++) {\n    elements[i] = Blockly.JavaScript.valueToCode(block, 'ADD' + i,\n        Blockly.JavaScript.ORDER_NONE) || '___';\n  }\n  var code = 'set([' + elements.join(', ') + '])';\n  return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/sets.js\n// module id = 287\n// module chunks = 2"],"sourceRoot":""}