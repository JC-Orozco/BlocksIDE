{"version":3,"sources":["..\\static\\js\\7.89243e2d.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\if.js"],"names":["webpackJsonp","282","module","exports","Blockly","Blocks","init","this","setHelpUrl","Msg","CONTROLS_IF_HELPURL","setColour","logic","HUE","appendValueInput","setCheck","appendField","CONTROLS_IF_MSG_IF","appendStatementInput","CONTROLS_IF_MSG_THEN","setPreviousStatement","setNextStatement","updateShape_","thisBlock","setTooltip","elseifCount_","elseCount_","CONTROLS_IF_TOOLTIP_2","CONTROLS_IF_TOOLTIP_3","CONTROLS_IF_TOOLTIP_4","CONTROLS_IF_TOOLTIP_1","mutationToDom","container","document","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","changeShape","field","block","e","rect","fieldGroup_","getBoundingClientRect","xPosition","clientX","left","width","console","log","getInput","clickableCheck","FieldClickImage","appendDummyInput","removeInput","i","CONTROLS_IF_MSG_ELSEIF","CONTROLS_IF_MSG_ELSE","Python","branchCode","conditionCode","n","code","valueToCode","ORDER_NONE","statementToCode","PASS","JavaScript"],"mappings":"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","file":"static/js/7.89243e2d.chunk.js","sourcesContent":["webpackJsonp([7],{\n\n/***/ 282:\n/***/ (function(module, exports) {\n\nBlockly.Blocks['controls_if_better'] = {\n  /**\n   * Block for if/elseif/else condition.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg.CONTROLS_IF_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.appendValueInput('IF0')\n        .setCheck('Boolean')\n        .appendField(Blockly.Msg.CONTROLS_IF_MSG_IF);\n    this.appendStatementInput('DO0')\n        .appendField(Blockly.Msg.CONTROLS_IF_MSG_THEN);\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.updateShape_();\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      if (!thisBlock.elseifCount_ && !thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_1;\n      } else if (!thisBlock.elseifCount_ && thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_2;\n      } else if (thisBlock.elseifCount_ && !thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_3;\n      } else if (thisBlock.elseifCount_ && thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_4;\n      }\n      return '';\n    });\n    this.elseifCount_ = 0;\n    this.elseCount_ = 0;\n  },\n  /**\n   * Create XML to represent the number of else-if and else inputs.\n   * @return {Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function() {\n    if (!this.elseifCount_ && !this.elseCount_) {\n      return null;\n    }\n    var container = document.createElement('mutation');\n    if (this.elseifCount_) {\n      container.setAttribute('elseif', this.elseifCount_);\n    }\n    if (this.elseCount_) {\n      container.setAttribute('else', 1);\n    }\n    return container;\n  },\n  /**\n   * Parse XML to restore the else-if and else inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function(xmlElement) {\n    this.elseifCount_ = parseInt(xmlElement.getAttribute('elseif'), 10) || 0;\n    this.elseCount_ = parseInt(xmlElement.getAttribute('else'), 10) || 0;\n    this.updateShape_();\n  },\n  /**\n   * Populate the mutator's dialog with this block's components.\n   * @param {!Blockly.Workspace} workspace Mutator's workspace.\n   * @return {!Blockly.Block} Root block in mutator.\n   * @this Blockly.Block\n   */\n   /*\n  decompose: function(workspace) {\n    var containerBlock = workspace.newBlock('controls_if_if');\n    containerBlock.initSvg();\n    var connection = containerBlock.nextConnection;\n    for (var i = 1; i <= this.elseifCount_; i++) {\n      var elseifBlock = workspace.newBlock('controls_if_elseif');\n      elseifBlock.initSvg();\n      connection.connect(elseifBlock.previousConnection);\n      connection = elseifBlock.nextConnection;\n    }\n    if (this.elseCount_) {\n      var elseBlock = workspace.newBlock('controls_if_else');\n      elseBlock.initSvg();\n      connection.connect(elseBlock.previousConnection);\n    }\n    return containerBlock;\n  },*/\n  /**\n   * Reconfigure this block based on the mutator dialog's components.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this Blockly.Block\n   *//*\n  compose: function(containerBlock) {\n    var clauseBlock = containerBlock.nextConnection.targetBlock();\n    // Count number of inputs.\n    this.elseifCount_ = 0;\n    this.elseCount_ = 0;\n    var valueConnections = [null];\n    var statementConnections = [null];\n    var elseStatementConnection = null;\n    while (clauseBlock) {\n      switch (clauseBlock.type) {\n        case 'controls_if_elseif':\n          this.elseifCount_++;\n          valueConnections.push(clauseBlock.valueConnection_);\n          statementConnections.push(clauseBlock.statementConnection_);\n          break;\n        case 'controls_if_else':\n          this.elseCount_++;\n          elseStatementConnection = clauseBlock.statementConnection_;\n          break;\n        default:\n          throw 'Unknown block type.';\n      }\n      clauseBlock = clauseBlock.nextConnection &&\n          clauseBlock.nextConnection.targetBlock();\n    }\n    this.updateShape_();\n    // Reconnect any child blocks.\n    for (var i = 1; i <= this.elseifCount_; i++) {\n      Blockly.Mutator.reconnect(valueConnections[i], this, 'IF' + i);\n      Blockly.Mutator.reconnect(statementConnections[i], this, 'DO' + i);\n    }\n    Blockly.Mutator.reconnect(elseStatementConnection, this, 'ELSE');\n  },*/\n  /**\n   * Store pointers to any connected child blocks.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this Blockly.Block\n   *//*\n  saveConnections: function(containerBlock) {\n    var clauseBlock = containerBlock.nextConnection.targetBlock();\n    var i = 1;\n    while (clauseBlock) {\n      switch (clauseBlock.type) {\n        case 'controls_if_elseif':\n          var inputIf = this.getInput('IF' + i);\n          var inputDo = this.getInput('DO' + i);\n          clauseBlock.valueConnection_ =\n              inputIf && inputIf.connection.targetConnection;\n          clauseBlock.statementConnection_ =\n              inputDo && inputDo.connection.targetConnection;\n          i++;\n          break;\n        case 'controls_if_else':\n          var inputDo = this.getInput('ELSE');\n          clauseBlock.statementConnection_ =\n              inputDo && inputDo.connection.targetConnection;\n          break;\n        default:\n          throw 'Unknown block type.';\n      }\n      clauseBlock = clauseBlock.nextConnection &&\n          clauseBlock.nextConnection.targetBlock();\n    }\n  },*/\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape_: function() {\n    // Delete everything.\n    if (!this.getInput('CONTROLS')) {\n        function changeShape(field, block, e) {\n            var rect = field.fieldGroup_.getBoundingClientRect();\n            var xPosition = e.clientX;\n            if (xPosition < rect.left+rect.width/3) {\n                console.log(\"ELSE\");\n            } else if (xPosition < 2 *rect.left+rect.width/3) {\n                console.log(\"MINUS ELIF\");\n            } else {\n                console.log(\"PLUS ELIF\");\n            }\n        }\n        //var clickablePlusMinus = new Blockly.FieldClickImage(\"images/plus_minus_h.png\", 24, 12, '', addField, '-0px');\n        var clickableCheck = new Blockly.FieldClickImage(\"images/plus_minus_blue.png\", 36, 24, '', changeShape, '-2px');\n        //clickablePlusMinus.imageElement_.style.y = '-2px';\n        this.appendDummyInput('CONTROLS')\n            .appendField(clickableCheck);\n            //.appendField(clickablePlusMinus);\n        //var clickableCheck2 = new Blockly.FieldClickImage(\"images/plus_minus_blue.png\", 36, 24, '', changeShape, '-2px');\n        //this.appendDummyInput('CONTROLS2')\n        //    .appendField(clickableCheck2);\n        //    //.appendField(clickablePlusMinus);\n    }\n    \n    if (this.getInput('ELSE')) {\n      this.removeInput('ELSE');\n    }\n    var i = 1;\n    while (this.getInput('IF' + i)) {\n      this.removeInput('IF' + i);\n      this.removeInput('DO' + i);\n      i++;\n    }\n    // Rebuild block.\n    for (var i = 1; i <= this.elseifCount_; i++) {\n      this.appendValueInput('IF' + i)\n          .setCheck('Boolean')\n          .appendField(Blockly.Msg.CONTROLS_IF_MSG_ELSEIF);\n      this.appendStatementInput('DO' + i)\n          .appendField(Blockly.Msg.CONTROLS_IF_MSG_THEN);\n    }\n    if (this.elseCount_) {\n      this.appendStatementInput('ELSE')\n          .appendField(Blockly.Msg.CONTROLS_IF_MSG_ELSE);\n    }\n  }\n};\nBlockly.Python['controls_if_better'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  do {\n    conditionCode = Blockly.Python.valueToCode(block, 'IF' + n,\n      Blockly.Python.ORDER_NONE) || '___';\n    branchCode = Blockly.Python.statementToCode(block, 'DO' + n) ||\n        Blockly.Python.PASS;\n    code += (n == 0 ? 'if ' : 'elif ' ) + conditionCode + ':\\n' + branchCode;\n\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE')) {\n    branchCode = Blockly.Python.statementToCode(block, 'ELSE') ||\n        Blockly.Python.PASS;\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n};\nBlockly.JavaScript['controls_if_better'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  do {\n    conditionCode = Blockly.JavaScript.valueToCode(block, 'IF' + n,\n      Blockly.JavaScript.ORDER_NONE) || '___';\n    branchCode = Blockly.JavaScript.statementToCode(block, 'DO' + n) ||\n        Blockly.JavaScript.PASS;\n    code += (n == 0 ? 'if (' : 'elif (' ) + conditionCode + ') {\\n' + branchCode + '\\n}\\n';\n\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE')) {\n    branchCode = Blockly.JavaScript.statementToCode(block, 'ELSE') ||\n        Blockly.JavaScript.PASS;\n    code += 'else {' + branchCode + '\\n}\\n';\n  }\n  return code;\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/7.89243e2d.chunk.js","Blockly.Blocks['controls_if_better'] = {\n  /**\n   * Block for if/elseif/else condition.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg.CONTROLS_IF_HELPURL);\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.appendValueInput('IF0')\n        .setCheck('Boolean')\n        .appendField(Blockly.Msg.CONTROLS_IF_MSG_IF);\n    this.appendStatementInput('DO0')\n        .appendField(Blockly.Msg.CONTROLS_IF_MSG_THEN);\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.updateShape_();\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      if (!thisBlock.elseifCount_ && !thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_1;\n      } else if (!thisBlock.elseifCount_ && thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_2;\n      } else if (thisBlock.elseifCount_ && !thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_3;\n      } else if (thisBlock.elseifCount_ && thisBlock.elseCount_) {\n        return Blockly.Msg.CONTROLS_IF_TOOLTIP_4;\n      }\n      return '';\n    });\n    this.elseifCount_ = 0;\n    this.elseCount_ = 0;\n  },\n  /**\n   * Create XML to represent the number of else-if and else inputs.\n   * @return {Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function() {\n    if (!this.elseifCount_ && !this.elseCount_) {\n      return null;\n    }\n    var container = document.createElement('mutation');\n    if (this.elseifCount_) {\n      container.setAttribute('elseif', this.elseifCount_);\n    }\n    if (this.elseCount_) {\n      container.setAttribute('else', 1);\n    }\n    return container;\n  },\n  /**\n   * Parse XML to restore the else-if and else inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function(xmlElement) {\n    this.elseifCount_ = parseInt(xmlElement.getAttribute('elseif'), 10) || 0;\n    this.elseCount_ = parseInt(xmlElement.getAttribute('else'), 10) || 0;\n    this.updateShape_();\n  },\n  /**\n   * Populate the mutator's dialog with this block's components.\n   * @param {!Blockly.Workspace} workspace Mutator's workspace.\n   * @return {!Blockly.Block} Root block in mutator.\n   * @this Blockly.Block\n   */\n   /*\n  decompose: function(workspace) {\n    var containerBlock = workspace.newBlock('controls_if_if');\n    containerBlock.initSvg();\n    var connection = containerBlock.nextConnection;\n    for (var i = 1; i <= this.elseifCount_; i++) {\n      var elseifBlock = workspace.newBlock('controls_if_elseif');\n      elseifBlock.initSvg();\n      connection.connect(elseifBlock.previousConnection);\n      connection = elseifBlock.nextConnection;\n    }\n    if (this.elseCount_) {\n      var elseBlock = workspace.newBlock('controls_if_else');\n      elseBlock.initSvg();\n      connection.connect(elseBlock.previousConnection);\n    }\n    return containerBlock;\n  },*/\n  /**\n   * Reconfigure this block based on the mutator dialog's components.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this Blockly.Block\n   *//*\n  compose: function(containerBlock) {\n    var clauseBlock = containerBlock.nextConnection.targetBlock();\n    // Count number of inputs.\n    this.elseifCount_ = 0;\n    this.elseCount_ = 0;\n    var valueConnections = [null];\n    var statementConnections = [null];\n    var elseStatementConnection = null;\n    while (clauseBlock) {\n      switch (clauseBlock.type) {\n        case 'controls_if_elseif':\n          this.elseifCount_++;\n          valueConnections.push(clauseBlock.valueConnection_);\n          statementConnections.push(clauseBlock.statementConnection_);\n          break;\n        case 'controls_if_else':\n          this.elseCount_++;\n          elseStatementConnection = clauseBlock.statementConnection_;\n          break;\n        default:\n          throw 'Unknown block type.';\n      }\n      clauseBlock = clauseBlock.nextConnection &&\n          clauseBlock.nextConnection.targetBlock();\n    }\n    this.updateShape_();\n    // Reconnect any child blocks.\n    for (var i = 1; i <= this.elseifCount_; i++) {\n      Blockly.Mutator.reconnect(valueConnections[i], this, 'IF' + i);\n      Blockly.Mutator.reconnect(statementConnections[i], this, 'DO' + i);\n    }\n    Blockly.Mutator.reconnect(elseStatementConnection, this, 'ELSE');\n  },*/\n  /**\n   * Store pointers to any connected child blocks.\n   * @param {!Blockly.Block} containerBlock Root block in mutator.\n   * @this Blockly.Block\n   *//*\n  saveConnections: function(containerBlock) {\n    var clauseBlock = containerBlock.nextConnection.targetBlock();\n    var i = 1;\n    while (clauseBlock) {\n      switch (clauseBlock.type) {\n        case 'controls_if_elseif':\n          var inputIf = this.getInput('IF' + i);\n          var inputDo = this.getInput('DO' + i);\n          clauseBlock.valueConnection_ =\n              inputIf && inputIf.connection.targetConnection;\n          clauseBlock.statementConnection_ =\n              inputDo && inputDo.connection.targetConnection;\n          i++;\n          break;\n        case 'controls_if_else':\n          var inputDo = this.getInput('ELSE');\n          clauseBlock.statementConnection_ =\n              inputDo && inputDo.connection.targetConnection;\n          break;\n        default:\n          throw 'Unknown block type.';\n      }\n      clauseBlock = clauseBlock.nextConnection &&\n          clauseBlock.nextConnection.targetBlock();\n    }\n  },*/\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape_: function() {\n    // Delete everything.\n    if (!this.getInput('CONTROLS')) {\n        function changeShape(field, block, e) {\n            var rect = field.fieldGroup_.getBoundingClientRect();\n            var xPosition = e.clientX;\n            if (xPosition < rect.left+rect.width/3) {\n                console.log(\"ELSE\");\n            } else if (xPosition < 2 *rect.left+rect.width/3) {\n                console.log(\"MINUS ELIF\");\n            } else {\n                console.log(\"PLUS ELIF\");\n            }\n        }\n        //var clickablePlusMinus = new Blockly.FieldClickImage(\"images/plus_minus_h.png\", 24, 12, '', addField, '-0px');\n        var clickableCheck = new Blockly.FieldClickImage(\"images/plus_minus_blue.png\", 36, 24, '', changeShape, '-2px');\n        //clickablePlusMinus.imageElement_.style.y = '-2px';\n        this.appendDummyInput('CONTROLS')\n            .appendField(clickableCheck);\n            //.appendField(clickablePlusMinus);\n        //var clickableCheck2 = new Blockly.FieldClickImage(\"images/plus_minus_blue.png\", 36, 24, '', changeShape, '-2px');\n        //this.appendDummyInput('CONTROLS2')\n        //    .appendField(clickableCheck2);\n        //    //.appendField(clickablePlusMinus);\n    }\n    \n    if (this.getInput('ELSE')) {\n      this.removeInput('ELSE');\n    }\n    var i = 1;\n    while (this.getInput('IF' + i)) {\n      this.removeInput('IF' + i);\n      this.removeInput('DO' + i);\n      i++;\n    }\n    // Rebuild block.\n    for (var i = 1; i <= this.elseifCount_; i++) {\n      this.appendValueInput('IF' + i)\n          .setCheck('Boolean')\n          .appendField(Blockly.Msg.CONTROLS_IF_MSG_ELSEIF);\n      this.appendStatementInput('DO' + i)\n          .appendField(Blockly.Msg.CONTROLS_IF_MSG_THEN);\n    }\n    if (this.elseCount_) {\n      this.appendStatementInput('ELSE')\n          .appendField(Blockly.Msg.CONTROLS_IF_MSG_ELSE);\n    }\n  }\n};\nBlockly.Python['controls_if_better'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  do {\n    conditionCode = Blockly.Python.valueToCode(block, 'IF' + n,\n      Blockly.Python.ORDER_NONE) || '___';\n    branchCode = Blockly.Python.statementToCode(block, 'DO' + n) ||\n        Blockly.Python.PASS;\n    code += (n == 0 ? 'if ' : 'elif ' ) + conditionCode + ':\\n' + branchCode;\n\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE')) {\n    branchCode = Blockly.Python.statementToCode(block, 'ELSE') ||\n        Blockly.Python.PASS;\n    code += 'else:\\n' + branchCode;\n  }\n  return code;\n};\nBlockly.JavaScript['controls_if_better'] = function(block) {\n  // If/elseif/else condition.\n  var n = 0;\n  var code = '', branchCode, conditionCode;\n  do {\n    conditionCode = Blockly.JavaScript.valueToCode(block, 'IF' + n,\n      Blockly.JavaScript.ORDER_NONE) || '___';\n    branchCode = Blockly.JavaScript.statementToCode(block, 'DO' + n) ||\n        Blockly.JavaScript.PASS;\n    code += (n == 0 ? 'if (' : 'elif (' ) + conditionCode + ') {\\n' + branchCode + '\\n}\\n';\n\n    ++n;\n  } while (block.getInput('IF' + n));\n\n  if (block.getInput('ELSE')) {\n    branchCode = Blockly.JavaScript.statementToCode(block, 'ELSE') ||\n        Blockly.JavaScript.PASS;\n    code += 'else {' + branchCode + '\\n}\\n';\n  }\n  return code;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/if.js\n// module id = 282\n// module chunks = 7"],"sourceRoot":""}