{"version":3,"sources":["..\\static\\js\\10.379a447a.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\comprehensions.js"],"names":["webpackJsonp","279","module","exports","Blockly","Blocks","init","this","appendValueInput","setCheck","appendField","appendDummyInput","setInputsInline","setOutput","setTooltip","setHelpUrl","Python","block","valueToCode","ORDER_ATOMIC","ORDER_NONE","JavaScript"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,GCHxBC,QAAAC,OAAA,oBACAC,KAAA,WACAC,KAAAC,iBAAA,QACAC,SAAA,MACAC,YAAA,KACAH,KAAAC,iBAAA,OACAC,SAAA,MACAC,YAAA,OACAH,KAAAC,iBAAA,QACAC,SAAA,MACAC,YAAA,MACAH,KAAAI,mBACAD,YAAA,KACAH,KAAAK,iBAAA,GACAL,KAAAM,WAAA,QACAN,KAAAO,WAAA,IACAP,KAAAQ,WAAA,6BAGAX,QAAAY,OAAA,4BAAAC,GAOA,OAFA,KAJAb,QAAAY,OAAAE,YAAAD,EAAA,OAAAb,QAAAY,OAAAG,eAAA,OAIA,SAHAf,QAAAY,OAAAE,YAAAD,EAAA,MAAAb,QAAAY,OAAAG,eAAA,OAGA,QAFAf,QAAAY,OAAAE,YAAAD,EAAA,OAAAb,QAAAY,OAAAG,eAAA,OAEA,IAEAf,QAAAY,OAAAI,aAEAhB,QAAAiB,WAAA,4BAAAJ,GAOA,OAFA,KAJAb,QAAAiB,WAAAH,YAAAD,EAAA,OAAAb,QAAAiB,WAAAF,eAAA,OAIA,SAHAf,QAAAiB,WAAAH,YAAAD,EAAA,MAAAb,QAAAiB,WAAAF,eAAA,OAGA,QAFAf,QAAAiB,WAAAH,YAAAD,EAAA,OAAAb,QAAAiB,WAAAF,eAAA,OAEA,IAEAf,QAAAiB,WAAAD","file":"static/js/10.379a447a.chunk.js","sourcesContent":["webpackJsonp([10],{\n\n/***/ 279:\n/***/ (function(module, exports) {\n\nBlockly.Blocks['list_comprehension'] = {\n  init: function() {\n    this.appendValueInput(\"body\")\n        .setCheck(null)\n        .appendField(\"[\");\n    this.appendValueInput(\"var\")\n        .setCheck(null)\n        .appendField(\"for\");\n    this.appendValueInput(\"list\")\n        .setCheck(null)\n        .appendField(\"in\");\n    this.appendDummyInput()\n        .appendField(\"]\");\n    this.setInputsInline(true);\n    this.setOutput(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('http://www.example.com/');\n  }\n};\nBlockly.Python['list_comprehension'] = function(block) {\n  var value_body = Blockly.Python.valueToCode(block, 'body', Blockly.Python.ORDER_ATOMIC) || '___';\n  var value_var = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC) || '___';\n  var value_list = Blockly.Python.valueToCode(block, 'list', Blockly.Python.ORDER_ATOMIC) || '___';\n  // TODO: Assemble Python into code variable.\n  var code = '['+value_body+' for '+value_var+' in '+value_list+']';\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.Python.ORDER_NONE];\n};\nBlockly.JavaScript['list_comprehension'] = function(block) {\n  var value_body = Blockly.JavaScript.valueToCode(block, 'body', Blockly.JavaScript.ORDER_ATOMIC) || '___';\n  var value_var = Blockly.JavaScript.valueToCode(block, 'var', Blockly.JavaScript.ORDER_ATOMIC) || '___';\n  var value_list = Blockly.JavaScript.valueToCode(block, 'list', Blockly.JavaScript.ORDER_ATOMIC) || '___';\n  // TODO: Assemble JavaScript into code variable.\n  var code = '['+value_body+' for '+value_var+' in '+value_list+']';\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/10.379a447a.chunk.js","Blockly.Blocks['list_comprehension'] = {\n  init: function() {\n    this.appendValueInput(\"body\")\n        .setCheck(null)\n        .appendField(\"[\");\n    this.appendValueInput(\"var\")\n        .setCheck(null)\n        .appendField(\"for\");\n    this.appendValueInput(\"list\")\n        .setCheck(null)\n        .appendField(\"in\");\n    this.appendDummyInput()\n        .appendField(\"]\");\n    this.setInputsInline(true);\n    this.setOutput(true, null);\n    this.setTooltip('');\n    this.setHelpUrl('http://www.example.com/');\n  }\n};\nBlockly.Python['list_comprehension'] = function(block) {\n  var value_body = Blockly.Python.valueToCode(block, 'body', Blockly.Python.ORDER_ATOMIC) || '___';\n  var value_var = Blockly.Python.valueToCode(block, 'var', Blockly.Python.ORDER_ATOMIC) || '___';\n  var value_list = Blockly.Python.valueToCode(block, 'list', Blockly.Python.ORDER_ATOMIC) || '___';\n  // TODO: Assemble Python into code variable.\n  var code = '['+value_body+' for '+value_var+' in '+value_list+']';\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.Python.ORDER_NONE];\n};\nBlockly.JavaScript['list_comprehension'] = function(block) {\n  var value_body = Blockly.JavaScript.valueToCode(block, 'body', Blockly.JavaScript.ORDER_ATOMIC) || '___';\n  var value_var = Blockly.JavaScript.valueToCode(block, 'var', Blockly.JavaScript.ORDER_ATOMIC) || '___';\n  var value_list = Blockly.JavaScript.valueToCode(block, 'list', Blockly.JavaScript.ORDER_ATOMIC) || '___';\n  // TODO: Assemble JavaScript into code variable.\n  var code = '['+value_body+' for '+value_var+' in '+value_list+']';\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/comprehensions.js\n// module id = 279\n// module chunks = 10"],"sourceRoot":""}