{"version":3,"sources":["..\\static\\js\\12.5f6e1cbf.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\class.js"],"names":["webpackJsonp","277","module","exports","Blockly","Blocks","init","this","appendDummyInput","appendField","FieldVariable","appendStatementInput","setCheck","setPreviousStatement","setNextStatement","setColour","setTooltip","setHelpUrl","Python","block","variableDB_","getName","getFieldValue","Variables","NAME_TYPE","statementToCode","PASS","JavaScript","appendValueInput","setInputsInline","setOutput","valueToCode","ORDER_ATOMIC","ORDER_NONE"],"mappings":"AAAAA,cAAc,KAERC,IACA,SAAUC,EAAQC,GCHxBC,QAAAC,OAAA,gBACAC,KAAA,WACAC,KAAAC,mBACAC,YAAA,gBACAA,YAAA,GAAAL,SAAAM,cAAA,sBAEAH,KAAAC,mBACAC,YAAA,iBACAA,YAAA,GAAAL,SAAAM,cAAA,aACAD,YAAA,KACAA,YAAA,GAAAL,SAAAM,cAAA,aAEAH,KAAAI,qBAAA,QACAC,SAAA,MACAL,KAAAM,sBAAA,QACAN,KAAAO,kBAAA,QACAP,KAAAQ,UAAA,KACAR,KAAAS,WAAA,IACAT,KAAAU,WAAA,6BAGAb,QAAAc,OAAA,wBAAAC,GAMA,MADA,UAJAf,QAAAc,OAAAE,YAAAC,QAAAF,EAAAG,cAAA,SAAAlB,QAAAmB,UAAAC,YAAA,OAIA,OAHApB,QAAAc,OAAAO,gBAAAN,EAAA,SACAf,QAAAc,OAAAQ,OAKAtB,QAAAuB,WAAA,wBAAAR,GAMA,MADA,UAJAf,QAAAuB,WAAAP,YAAAC,QAAAF,EAAAG,cAAA,SAAAlB,QAAAmB,UAAAC,YAAA,OAIA,QAHApB,QAAAuB,WAAAF,gBAAAN,EAAA,SACAf,QAAAuB,WAAAD,MAEwC,SAIxCtB,QAAAC,OAAA,kBACAC,KAAA,WACAC,KAAAqB,iBAAA,UACAhB,SAAA,MACAL,KAAAqB,iBAAA,QACAhB,SAAA,MACAH,YAAA,KACAF,KAAAsB,iBAAA,GACAtB,KAAAuB,WAAA,QACAvB,KAAAQ,UAAA,KACAR,KAAAS,WAAA,IACAT,KAAAU,WAAA,MAGAb,QAAAc,OAAA,0BAAAC,GAMA,OALAf,QAAAc,OAAAa,YAAAZ,EAAA,SAAAf,QAAAc,OAAAc,cAGA,IAFA5B,QAAAc,OAAAa,YAAAZ,EAAA,OAAAf,QAAAc,OAAAc,cAIA5B,QAAAc,OAAAe,aAEA7B,QAAAuB,WAAA,0BAAAR,GAMA,OALAf,QAAAuB,WAAAI,YAAAZ,EAAA,SAAAf,QAAAuB,WAAAK,cAGA,IAFA5B,QAAAuB,WAAAI,YAAAZ,EAAA,OAAAf,QAAAuB,WAAAK,cAIA5B,QAAAuB,WAAAM","file":"static/js/12.5f6e1cbf.chunk.js","sourcesContent":["webpackJsonp([12],{\n\n/***/ 277:\n/***/ (function(module, exports) {\n\nBlockly.Blocks['class_creation'] = {\n  init: function() {\n    this.appendDummyInput()\n        .appendField(\"Create class\")\n        .appendField(new Blockly.FieldVariable(\"new class\"), \"CLASS\");\n    \n    this.appendDummyInput()\n        .appendField(\"Inherits from\")\n        .appendField(new Blockly.FieldVariable(\"j\"), \"NAME\")\n        .appendField(\",\")\n        .appendField(new Blockly.FieldVariable(\"k\"), \"NAME\");\n  \n    this.appendStatementInput(\"BODY\")\n        .setCheck(null);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(230);\n    this.setTooltip('');\n    this.setHelpUrl('http://www.example.com/');\n  }\n};\nBlockly.Python['class_creation'] = function(block) {\n  var class_name = Blockly.Python.variableDB_.getName(block.getFieldValue('CLASS'), Blockly.Variables.NAME_TYPE) || '___';\n  var body = Blockly.Python.statementToCode(block, 'BODY') ||\n      Blockly.Python.PASS;\n  // TODO: Assemble Python into code variable.\n  var code = 'class ' + class_name + ':\\n' + body;\n  return code;\n};\nBlockly.JavaScript['class_creation'] = function(block) {\n  var class_name = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('CLASS'), Blockly.Variables.NAME_TYPE) || '___';\n  var body = Blockly.JavaScript.statementToCode(block, 'BODY') ||\n      Blockly.JavaScript.PASS;\n  // TODO: Assemble JavaScript into code variable.\n  var code = 'class ' + class_name + ' {\\n' + body + '\\n}\\n';\n  return code;\n};\n\nBlockly.Blocks['attribute_access'] = {\n  init: function() {\n    this.appendValueInput(\"MODULE\")\n        .setCheck(null);\n    this.appendValueInput(\"NAME\")\n        .setCheck(null)\n        .appendField(\".\");\n    this.setInputsInline(true);\n    this.setOutput(true, null);\n    this.setColour(230);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['attribute_access'] = function(block) {\n  var value_module = Blockly.Python.valueToCode(block, 'MODULE', Blockly.Python.ORDER_ATOMIC);\n  var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble JavaScript into code variable.\n  var code = value_module+'.'+value_name;\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.Python.ORDER_NONE];\n};\nBlockly.JavaScript['attribute_access'] = function(block) {\n  var value_module = Blockly.JavaScript.valueToCode(block, 'MODULE', Blockly.JavaScript.ORDER_ATOMIC);\n  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);\n  // TODO: Assemble JavaScript into code variable.\n  var code = value_module+'.'+value_name;\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/12.5f6e1cbf.chunk.js","Blockly.Blocks['class_creation'] = {\n  init: function() {\n    this.appendDummyInput()\n        .appendField(\"Create class\")\n        .appendField(new Blockly.FieldVariable(\"new class\"), \"CLASS\");\n    \n    this.appendDummyInput()\n        .appendField(\"Inherits from\")\n        .appendField(new Blockly.FieldVariable(\"j\"), \"NAME\")\n        .appendField(\",\")\n        .appendField(new Blockly.FieldVariable(\"k\"), \"NAME\");\n  \n    this.appendStatementInput(\"BODY\")\n        .setCheck(null);\n    this.setPreviousStatement(true, null);\n    this.setNextStatement(true, null);\n    this.setColour(230);\n    this.setTooltip('');\n    this.setHelpUrl('http://www.example.com/');\n  }\n};\nBlockly.Python['class_creation'] = function(block) {\n  var class_name = Blockly.Python.variableDB_.getName(block.getFieldValue('CLASS'), Blockly.Variables.NAME_TYPE) || '___';\n  var body = Blockly.Python.statementToCode(block, 'BODY') ||\n      Blockly.Python.PASS;\n  // TODO: Assemble Python into code variable.\n  var code = 'class ' + class_name + ':\\n' + body;\n  return code;\n};\nBlockly.JavaScript['class_creation'] = function(block) {\n  var class_name = Blockly.JavaScript.variableDB_.getName(block.getFieldValue('CLASS'), Blockly.Variables.NAME_TYPE) || '___';\n  var body = Blockly.JavaScript.statementToCode(block, 'BODY') ||\n      Blockly.JavaScript.PASS;\n  // TODO: Assemble JavaScript into code variable.\n  var code = 'class ' + class_name + ' {\\n' + body + '\\n}\\n';\n  return code;\n};\n\nBlockly.Blocks['attribute_access'] = {\n  init: function() {\n    this.appendValueInput(\"MODULE\")\n        .setCheck(null);\n    this.appendValueInput(\"NAME\")\n        .setCheck(null)\n        .appendField(\".\");\n    this.setInputsInline(true);\n    this.setOutput(true, null);\n    this.setColour(230);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['attribute_access'] = function(block) {\n  var value_module = Blockly.Python.valueToCode(block, 'MODULE', Blockly.Python.ORDER_ATOMIC);\n  var value_name = Blockly.Python.valueToCode(block, 'NAME', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble JavaScript into code variable.\n  var code = value_module+'.'+value_name;\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.Python.ORDER_NONE];\n};\nBlockly.JavaScript['attribute_access'] = function(block) {\n  var value_module = Blockly.JavaScript.valueToCode(block, 'MODULE', Blockly.JavaScript.ORDER_ATOMIC);\n  var value_name = Blockly.JavaScript.valueToCode(block, 'NAME', Blockly.JavaScript.ORDER_ATOMIC);\n  // TODO: Assemble JavaScript into code variable.\n  var code = value_module+'.'+value_name;\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.JavaScript.ORDER_NONE];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/class.js\n// module id = 277\n// module chunks = 12"],"sourceRoot":""}