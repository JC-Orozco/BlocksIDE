{"version":3,"sources":["..\\static\\js\\8.ee3b2e15.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\dict.js"],"names":["webpackJsonp","281","module","exports","Blockly","Blocks","init","console","log","this","setInputsInline","setColour","dicts","HUE","itemCount_","updateShape_","setOutput","setTooltip","Msg","DICTS_CREATE_WITH_TOOLTIP","mutationToDom","workspace","container","document","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","fixEmpty_","getInput","fieldRow","setText","DICTS_CREATE_EMPTY_TITLE","addRow","i","appendValueInput","setCheck","setAlign","ALIGN_RIGHT","appendField","FieldTextInput","DICTS_CREATE_WITH_ITEM_KEY","DICTS_CREATE_WITH_ITEM_MAPPING","addField","field","block","e","that","removeField","removeInput","clickableMinus","FieldClickImage","appendDummyInput","clickablePlus","Python","dicts_create_with","code","valueToCode","ORDER_ATOMIC","Array","n","key","quote_","getFieldValue","value","ORDER_NONE","join","JavaScript"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,GCDxBC,QAAAC,OAAA,mBAKAC,KAAA,WACAC,QAAAC,IAAA,QACAC,KAAAC,iBAAA,GACAD,KAAAE,UAAAP,QAAAC,OAAAO,MAAAC,KACAJ,KAAAK,WAAA,EACAL,KAAAM,eACAN,KAAAO,WAAA,UACAP,KAAAQ,WAAAb,QAAAc,IAAAC,4BAOAC,cAAA,SAAAC,GACA,GAAAC,GAAAC,SAAAC,cAAA,WAEA,OADAF,GAAAG,aAAA,QAAAhB,KAAAK,YACAQ,GAOAI,cAAA,SAAAC,GACAlB,KAAAK,WAAAc,SAAAD,EAAAE,aAAA,aACApB,KAAAM,gBAEAe,UAAA,WACArB,KAAAK,WAAA,EACAL,KAAAsB,SAAA,SAAAC,SAAA,GAAAC,QAAA,iBAEAxB,KAAAsB,SAAA,SAAAC,SAAA,GAAAC,QAAA7B,QAAAc,IAAAgB,2BAGAC,OAAA,SAAAC,GACA3B,KAAAsB,SAAA,QAAAK,IACA3B,KAAA4B,iBAAA,QAAAD,GACAE,SAAA,MACAC,SAAAnC,QAAAoC,aACAC,YACA,GAAArC,SAAAsC,eACAtC,QAAAc,IAAAyB,4BACA,MAAAP,GACAK,YAAArC,QAAAc,IAAA0B,iCAQA7B,aAAA,WAEA,QAAA8B,GAAAC,EAAAC,EAAAC,GAIAC,EAAAnC,YAAA,EACAmC,EAAAd,OAAAc,EAAAnC,YAOAmC,EAAAnB,YAEA,QAAAoB,GAAAJ,EAAAC,EAAAC,GAOAC,EAAAnC,WAAA,IACAmC,EAAAE,YAAA,QAAAF,EAAAnC,YACAmC,EAAAnC,YAAA,GAGAmC,EAAAnB,YA3BA,GAAAmB,GAAAxC,IA+BA,KAAAA,KAAAsB,SAAA,WACA,GAAAqB,GAAA,GAAAhD,SAAAiD,gBAAA,oCAAAH,EAAA,OACAzC,MAAA6C,iBAAA,UACAb,YAAA,iBACAA,YAAAW,GAEA,IAAA3C,KAAAsB,SAAA,UACA,GAAAwB,GAAA,GAAAnD,SAAAiD,gBAAA,mCAAAR,EAAA,OACApC,MAAA6C,iBAAA,SAEAb,YAAAc,GAEA9C,KAAAqB,WACA,QAAAM,GAAA,EAAuBA,GAAA3B,KAAAK,WAAsBsB,IAC7C3B,KAAA0B,OAAAC,KAIAhC,QAAAoD,OAAAC,kBAAA,SAAAV,GAKA,OAFAW,IAFAtD,QAAAoD,OAAAG,YAAAZ,EAAA,OAAA3C,QAAAoD,OAAAI,cAEA,GAAAC,OAAAd,EAAAjC,aAEAgD,EAAA,EAAmBA,GAAAf,EAAAjC,WAAuBgD,IAAA,CAC1C,GAAAC,GAAA3D,QAAAoD,OAAAQ,OAAAjB,EAAAkB,cAAA,MAAAH,IACAI,EAAA9D,QAAAoD,OAAAG,YAAAZ,EAAA,QAAAe,EACA1D,QAAAoD,OAAAW,aAAA,KACAT,GAAAI,EAAA,GAAAC,EAAA,KAAAG,EAGA,MADAR,GAAA,IAAaA,EAAAU,KAAA,WACbV,EAAAtD,QAAAoD,OAAAI,eAEAxD,QAAAiE,WAAAZ,kBAAA,SAAAV,GAKA,OAFAW,IAFAtD,QAAAiE,WAAAV,YAAAZ,EAAA,OAAA3C,QAAAiE,WAAAT,cAEA,GAAAC,OAAAd,EAAAjC,aAEAgD,EAAA,EAAmBA,GAAAf,EAAAjC,WAAuBgD,IAAA,CAC1C,GAAAC,GAAA3D,QAAAiE,WAAAL,OAAAjB,EAAAkB,cAAA,MAAAH,IACAI,EAAA9D,QAAAiE,WAAAV,YAAAZ,EAAA,QAAAe,EACA1D,QAAAiE,WAAAF,aAAA,KACAT,GAAAI,EAAA,GAAAC,EAAA,KAAAG,EAGA,MADAR,GAAA,IAAaA,EAAAU,KAAA,WACbV,EAAAtD,QAAAiE,WAAAT","file":"static/js/8.ee3b2e15.chunk.js","sourcesContent":["webpackJsonp([8],{\n\n/***/ 281:\n/***/ (function(module, exports) {\n\n/* Ported to latest blockly develop branch july 2017 by JC-Orozco (Juan Carlos Orozco) */\n\nBlockly.Blocks['dicts_create_with'] = {\n    /**\n     * Block for creating a dict with any number of elements of any type.\n     * @this Blockly.Block\n     */\n    init: function() {\n        console.log(\"init\");\n        this.setInputsInline(false);\n        this.setColour(Blockly.Blocks.dicts.HUE);\n        this.itemCount_ = 1;\n        this.updateShape_();\n        this.setOutput(true, 'dict');\n        this.setTooltip(Blockly.Msg.DICTS_CREATE_WITH_TOOLTIP);\n    },\n    /**\n     * Create XML to represent dict inputs.\n     * @return {Element} XML storage element.\n     * @this Blockly.Block\n     */\n    mutationToDom: function(workspace) {\n        var container = document.createElement('mutation');\n        container.setAttribute('items', this.itemCount_);\n        return container;\n    },\n    /**\n     * Parse XML to restore the dict inputs.\n     * @param {!Element} xmlElement XML storage element.\n     * @this Blockly.Block\n     */\n    domToMutation: function(xmlElement) {\n        this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n        this.updateShape_();\n    },\n    fixEmpty_: function() {\n        if (this.itemCount_ > 0) {\n            this.getInput(\"START\").fieldRow[0].setText(\"dictionary of\");\n        } else {\n            this.getInput(\"START\").fieldRow[0].setText(Blockly.Msg.DICTS_CREATE_EMPTY_TITLE);\n        }\n    },\n    addRow: function(i) {\n        if (!this.getInput('VALUE'+i)) {\n            this.appendValueInput('VALUE' + i)\n                .setCheck(null)\n                .setAlign(Blockly.ALIGN_RIGHT)\n                .appendField(\n                      new Blockly.FieldTextInput(\n                          Blockly.Msg.DICTS_CREATE_WITH_ITEM_KEY),\n                     'KEY'+i)\n               .appendField(Blockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING);\n        }\n    },\n    /**\n     * Modify this block to have the correct number of inputs.\n     * @private\n     * @this Blockly.Block\n     */\n    updateShape_: function() {\n        var that = this;\n        function addField(field, block, e) {\n            //var rect = field.fieldGroup_.getBoundingClientRect();\n            //var yPosition = e.clientY;\n            //if (yPosition < rect.top+rect.height/2) {\n                that.itemCount_ += 1;\n                that.addRow(that.itemCount_);\n            //} else {\n            //    if (that.itemCount_ > 0) {\n            //        that.removeInput('VALUE' + that.itemCount_);\n            //        that.itemCount_ -= 1;\n            //    }\n            //}\n            that.fixEmpty_();\n        }\n        function removeField(field, block, e) {\n            //var rect = field.fieldGroup_.getBoundingClientRect();\n            //var yPosition = e.clientY;\n            //if (yPosition < rect.top+rect.height/2) {\n            //    that.itemCount_ += 1;\n            //    that.addRow(that.itemCount_);\n            //} else {\n                if (that.itemCount_ > 0) {\n                    that.removeInput('VALUE' + that.itemCount_);\n                    that.itemCount_ -= 1;\n                }\n            //}\n            that.fixEmpty_();\n        }\n        // Rebuild block.\n        //var clickablePlusMinus = new Blockly.FieldClickImage(\"images/plus_minus_v.png\", 24, 24, '+', addField, '-2px');\n        if (!this.getInput(\"REMOVE\")) {\n            var clickableMinus = new Blockly.FieldClickImage(\"images/minus-button.svg\", 24, 24, '+', removeField, '-2px');\n            this.appendDummyInput('REMOVE')\n                .appendField(\"dictionary of\")\n                .appendField(clickableMinus);\n        }\n        if (!this.getInput(\"START\")) {\n            var clickablePlus = new Blockly.FieldClickImage(\"images/plus-button.svg\", 24, 24, '+', addField, '-2px');\n            this.appendDummyInput('START')\n                //.appendField(\"dictionary of\")\n                .appendField(clickablePlus);\n        }\n        this.fixEmpty_();\n        for (var i = 1; i <= this.itemCount_; i++) {\n            this.addRow(i);\n        }\n    }\n};\nBlockly.Python.dicts_create_with = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 1; n <= block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n-1] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\nBlockly.JavaScript.dicts_create_with = function(block) {\n    var value_keys = Blockly.JavaScript.valueToCode(block, 'keys', Blockly.   JavaScript.ORDER_ATOMIC);\n    // TODO: Assemble JavaScript into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 1; n <= block.itemCount_; n++) {\n        var key = Blockly.JavaScript.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.JavaScript.valueToCode(block, 'VALUE' + n,\n                Blockly.JavaScript.ORDER_NONE) || '___';\n        code[n-1] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/8.ee3b2e15.chunk.js","/* Ported to latest blockly develop branch july 2017 by JC-Orozco (Juan Carlos Orozco) */\n\nBlockly.Blocks['dicts_create_with'] = {\n    /**\n     * Block for creating a dict with any number of elements of any type.\n     * @this Blockly.Block\n     */\n    init: function() {\n        console.log(\"init\");\n        this.setInputsInline(false);\n        this.setColour(Blockly.Blocks.dicts.HUE);\n        this.itemCount_ = 1;\n        this.updateShape_();\n        this.setOutput(true, 'dict');\n        this.setTooltip(Blockly.Msg.DICTS_CREATE_WITH_TOOLTIP);\n    },\n    /**\n     * Create XML to represent dict inputs.\n     * @return {Element} XML storage element.\n     * @this Blockly.Block\n     */\n    mutationToDom: function(workspace) {\n        var container = document.createElement('mutation');\n        container.setAttribute('items', this.itemCount_);\n        return container;\n    },\n    /**\n     * Parse XML to restore the dict inputs.\n     * @param {!Element} xmlElement XML storage element.\n     * @this Blockly.Block\n     */\n    domToMutation: function(xmlElement) {\n        this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n        this.updateShape_();\n    },\n    fixEmpty_: function() {\n        if (this.itemCount_ > 0) {\n            this.getInput(\"START\").fieldRow[0].setText(\"dictionary of\");\n        } else {\n            this.getInput(\"START\").fieldRow[0].setText(Blockly.Msg.DICTS_CREATE_EMPTY_TITLE);\n        }\n    },\n    addRow: function(i) {\n        if (!this.getInput('VALUE'+i)) {\n            this.appendValueInput('VALUE' + i)\n                .setCheck(null)\n                .setAlign(Blockly.ALIGN_RIGHT)\n                .appendField(\n                      new Blockly.FieldTextInput(\n                          Blockly.Msg.DICTS_CREATE_WITH_ITEM_KEY),\n                     'KEY'+i)\n               .appendField(Blockly.Msg.DICTS_CREATE_WITH_ITEM_MAPPING);\n        }\n    },\n    /**\n     * Modify this block to have the correct number of inputs.\n     * @private\n     * @this Blockly.Block\n     */\n    updateShape_: function() {\n        var that = this;\n        function addField(field, block, e) {\n            //var rect = field.fieldGroup_.getBoundingClientRect();\n            //var yPosition = e.clientY;\n            //if (yPosition < rect.top+rect.height/2) {\n                that.itemCount_ += 1;\n                that.addRow(that.itemCount_);\n            //} else {\n            //    if (that.itemCount_ > 0) {\n            //        that.removeInput('VALUE' + that.itemCount_);\n            //        that.itemCount_ -= 1;\n            //    }\n            //}\n            that.fixEmpty_();\n        }\n        function removeField(field, block, e) {\n            //var rect = field.fieldGroup_.getBoundingClientRect();\n            //var yPosition = e.clientY;\n            //if (yPosition < rect.top+rect.height/2) {\n            //    that.itemCount_ += 1;\n            //    that.addRow(that.itemCount_);\n            //} else {\n                if (that.itemCount_ > 0) {\n                    that.removeInput('VALUE' + that.itemCount_);\n                    that.itemCount_ -= 1;\n                }\n            //}\n            that.fixEmpty_();\n        }\n        // Rebuild block.\n        //var clickablePlusMinus = new Blockly.FieldClickImage(\"images/plus_minus_v.png\", 24, 24, '+', addField, '-2px');\n        if (!this.getInput(\"REMOVE\")) {\n            var clickableMinus = new Blockly.FieldClickImage(\"images/minus-button.svg\", 24, 24, '+', removeField, '-2px');\n            this.appendDummyInput('REMOVE')\n                .appendField(\"dictionary of\")\n                .appendField(clickableMinus);\n        }\n        if (!this.getInput(\"START\")) {\n            var clickablePlus = new Blockly.FieldClickImage(\"images/plus-button.svg\", 24, 24, '+', addField, '-2px');\n            this.appendDummyInput('START')\n                //.appendField(\"dictionary of\")\n                .appendField(clickablePlus);\n        }\n        this.fixEmpty_();\n        for (var i = 1; i <= this.itemCount_; i++) {\n            this.addRow(i);\n        }\n    }\n};\nBlockly.Python.dicts_create_with = function(block) {\n    var value_keys = Blockly.Python.valueToCode(block, 'keys', Blockly.   Python.ORDER_ATOMIC);\n    // TODO: Assemble Python into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 1; n <= block.itemCount_; n++) {\n        var key = Blockly.Python.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.Python.valueToCode(block, 'VALUE' + n,\n                Blockly.Python.ORDER_NONE) || '___';\n        code[n-1] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\nBlockly.JavaScript.dicts_create_with = function(block) {\n    var value_keys = Blockly.JavaScript.valueToCode(block, 'keys', Blockly.   JavaScript.ORDER_ATOMIC);\n    // TODO: Assemble JavaScript into code variable.\n    var code = new Array(block.itemCount_);\n  \n    for (var n = 1; n <= block.itemCount_; n++) {\n        var key = Blockly.JavaScript.quote_(block.getFieldValue('KEY' + n));\n        var value = Blockly.JavaScript.valueToCode(block, 'VALUE' + n,\n                Blockly.JavaScript.ORDER_NONE) || '___';\n        code[n-1] = key +\": \"+ value;\n    }\n    code = '{' + code.join(', ') + '}';\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/dict.js\n// module id = 281\n// module chunks = 8"],"sourceRoot":""}