{"version":3,"sources":["..\\static\\js\\1.79efe4a0.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\tuple.js"],"names":["webpackJsonp","288","module","exports","Blockly","Blocks","init","this","setHelpUrl","Msg","LISTS_CREATE_WITH_HELPURL","setColour","lists","HUE","itemCount_","updateShape_","setOutput","setInputsInline","setTooltip","LISTS_CREATE_WITH_TOOLTIP","mutationToDom","container","document","createElement","setAttribute","domToMutation","xmlElement","parseInt","getAttribute","PLUS_MINUS_updateShape","Python","block","elements","Array","i","valueToCode","ORDER_NONE","code","join","ORDER_ATOMIC","JavaScript"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,GCHxBC,QAAAC,OAAA,cAKAC,KAAA,WACAC,KAAAC,WAAAJ,QAAAK,IAAAC,2BACAH,KAAAI,UAAAP,QAAAC,OAAAO,MAAAC,IAAA,IACAN,KAAAO,WAAA,EACAP,KAAAQ,eACAR,KAAAS,WAAA,WACAT,KAAAU,iBAAA,GACAV,KAAAW,WAAAd,QAAAK,IAAAU,4BAOAC,cAAA,WACA,GAAAC,GAAAC,SAAAC,cAAA,WAEA,OADAF,GAAAG,aAAA,QAAAjB,KAAAO,YACAO,GAOAI,cAAA,SAAAC,GACAnB,KAAAO,WAAAa,SAAAD,EAAAE,aAAA,aACArB,KAAAQ,gBAOAA,aAAAc,uBAAA,0BAEAzB,QAAA0B,OAAA,sBAAAC,GAGA,OADAC,GAAA,GAAAC,OAAAF,EAAAjB,YACAoB,EAAA,EAAmBA,EAAAH,EAAAjB,WAAsBoB,IACzCF,EAAAE,GAAA9B,QAAA0B,OAAAK,YAAAJ,EAAA,MAAAG,EACA9B,QAAA0B,OAAAM,aAAA,KAEA,IAAAC,GAAAL,EAAAM,KAAA,KAMA,OAJAD,GADA,GAAAN,EAAAjB,WACA,IAAAuB,EAAA,KAEA,IAAAA,EAAA,KAEAA,EAAAjC,QAAA0B,OAAAS,eAEAnC,QAAAoC,WAAA,sBAAAT,GAGA,OADAC,GAAA,GAAAC,OAAAF,EAAAjB,YACAoB,EAAA,EAAmBA,EAAAH,EAAAjB,WAAsBoB,IACzCF,EAAAE,GAAA9B,QAAAoC,WAAAL,YAAAJ,EAAA,MAAAG,EACA9B,QAAAoC,WAAAJ,aAAA,KAGA,QADA,IAAAJ,EAAAM,KAAA,UACAlC,QAAAoC,WAAAD","file":"static/js/1.79efe4a0.chunk.js","sourcesContent":["webpackJsonp([1],{\n\n/***/ 288:\n/***/ (function(module, exports) {\n\nBlockly.Blocks['tuple_create'] = {\n  /**\n   * Block for creating a list with any number of elements of any type.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg.LISTS_CREATE_WITH_HELPURL);\n    this.setColour(Blockly.Blocks.lists.HUE+10);\n    this.itemCount_ = 3;\n    this.updateShape_();\n    this.setOutput(true, 'Tuple');\n    this.setInputsInline(true);\n    this.setTooltip(Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP);\n  },\n  /**\n   * Create XML to represent list inputs.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function() {\n    var container = document.createElement('mutation');\n    container.setAttribute('items', this.itemCount_);\n    return container;\n  },\n  /**\n   * Parse XML to restore the list inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function(xmlElement) {\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n    this.updateShape_();\n  },\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape_: PLUS_MINUS_updateShape('ADD', \"create tuple of\")\n};\nBlockly.Python['tuple_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n    var elements = new Array(block.itemCount_);\n    for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = (Blockly.Python.valueToCode(block, 'ADD' + i,\n            Blockly.Python.ORDER_NONE) || '___' );\n    }\n    var code = elements.join(', ');\n    if (block.itemCount_ == 1) {\n        code = '(' + code + ',)';\n    } else {\n        code = '(' + code + ')';\n    }\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\nBlockly.JavaScript['tuple_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n    var elements = new Array(block.itemCount_);\n    for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = (Blockly.JavaScript.valueToCode(block, 'ADD' + i,\n            Blockly.JavaScript.ORDER_NONE) || '___' );\n    }\n    var code = '[' + elements.join(', ') + ']';\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/1.79efe4a0.chunk.js","Blockly.Blocks['tuple_create'] = {\n  /**\n   * Block for creating a list with any number of elements of any type.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setHelpUrl(Blockly.Msg.LISTS_CREATE_WITH_HELPURL);\n    this.setColour(Blockly.Blocks.lists.HUE+10);\n    this.itemCount_ = 3;\n    this.updateShape_();\n    this.setOutput(true, 'Tuple');\n    this.setInputsInline(true);\n    this.setTooltip(Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP);\n  },\n  /**\n   * Create XML to represent list inputs.\n   * @return {!Element} XML storage element.\n   * @this Blockly.Block\n   */\n  mutationToDom: function() {\n    var container = document.createElement('mutation');\n    container.setAttribute('items', this.itemCount_);\n    return container;\n  },\n  /**\n   * Parse XML to restore the list inputs.\n   * @param {!Element} xmlElement XML storage element.\n   * @this Blockly.Block\n   */\n  domToMutation: function(xmlElement) {\n    this.itemCount_ = parseInt(xmlElement.getAttribute('items'), 10);\n    this.updateShape_();\n  },\n  /**\n   * Modify this block to have the correct number of inputs.\n   * @private\n   * @this Blockly.Block\n   */\n  updateShape_: PLUS_MINUS_updateShape('ADD', \"create tuple of\")\n};\nBlockly.Python['tuple_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n    var elements = new Array(block.itemCount_);\n    for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = (Blockly.Python.valueToCode(block, 'ADD' + i,\n            Blockly.Python.ORDER_NONE) || '___' );\n    }\n    var code = elements.join(', ');\n    if (block.itemCount_ == 1) {\n        code = '(' + code + ',)';\n    } else {\n        code = '(' + code + ')';\n    }\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\nBlockly.JavaScript['tuple_create'] = function(block) {\n    // Create a list with any number of elements of any type.\n    var elements = new Array(block.itemCount_);\n    for (var i = 0; i < block.itemCount_; i++) {\n        elements[i] = (Blockly.JavaScript.valueToCode(block, 'ADD' + i,\n            Blockly.JavaScript.ORDER_NONE) || '___' );\n    }\n    var code = '[' + elements.join(', ') + ']';\n    return [code, Blockly.JavaScript.ORDER_ATOMIC];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/tuple.js\n// module id = 288\n// module chunks = 1"],"sourceRoot":""}