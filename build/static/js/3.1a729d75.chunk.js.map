{"version":3,"sources":["..\\static\\js\\3.1a729d75.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\parking.js"],"names":["webpackJsonp","286","module","exports","DATA_HUE","DAYS","DAYS_MAP","mon","tue","wed","thu","fri","sat","sun","tod","Blockly","Blocks","init","this","jsonInit","message0","args0","type","name","options","concat","output","colour","tooltip","helpUrl","Python","block","definitions_","getFieldValue","slice","toLowerCase","ORDER_ATOMIC","HOURS","MINUTES","MERIDIANS","setColour","dropdown","FieldDropdown","opt","isNow","sourceBlock_","updateShape_","appendDummyInput","appendField","setInputsInline","setOutput","setTooltip","mutationToDom","container","document","createElement","toUpperCase","setAttribute","domToMutation","xmlElement","getAttribute","inputExists","getInput","removeInput","minuteMenu","meridianMenu","code","hour","parseInt","quote_","convertDate","date","convertMinute","minute","PythonToBlocks","KNOWN_MODULES","today","day_compare","mode","method","Day","now","Time","add_mutation","value","time_compare","equalityOperators","logic","HUE","appendValueInput","setCheck","valueToCode","meridian"],"mappings":"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","file":"static/js/3.1a729d75.chunk.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 286:\n/***/ (function(module, exports) {\n\nvar DATA_HUE = 210;\n\nvar DAYS = [\n    [\"Monday\", \"MON\"],\n    [\"Tuesday\", \"TUE\"],\n    [\"Wednesday\", \"WED\"],\n    [\"Thursday\", \"THU\"],\n    [\"Friday\", \"FRI\"],\n    [\"Saturday\", \"SAT\"],\n    [\"Sunday\", \"SUN\"]\n  ]\n\nvar DAYS_MAP = {\n        'mon': 'parking.Day(\"MON\")',\n        'tue': 'parking.Day(\"TUE\")',\n        'wed': 'parking.Day(\"WED\")',\n        'thu': 'parking.Day(\"THU\")',\n        'fri': 'parking.Day(\"FRI\")',\n        'sat': 'parking.Day(\"SAT\")',\n        'sun': 'parking.Day(\"SUN\")',\n        'tod': 'parking.today()'\n    };\n\n\nBlockly.Blocks['datetime_day'] = {\n  /**\n   * Block for datetime day.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"DAY\",\n          \"options\": [[\"Today\", \"TODAY\"]].concat(DAYS)\n        }\n      ],\n      \"output\": \"DatetimeDay\",\n      \"colour\": DATA_HUE,\n      \"tooltip\": \"Returns a day of the week\",\n      \"helpUrl\": \"\"\n    });\n  }\n};\nBlockly.Python['datetime_day'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var operator = DAYS_MAP[block.getFieldValue('DAY').slice(0, 3).toLowerCase()];\n    return [operator, Blockly.Python.ORDER_ATOMIC];\n};\n\nvar HOURS = [[\"1\", \"1\"], [\"2\", \"2\"], [\"3\", \"3\"],\n             [\"4\", \"4\"], [\"5\", \"5\"], [\"6\", \"6\"], [\"7\", \"7\"],\n             [\"8\", \"8\"], [\"9\", \"9\"], [\"10\", \"10\"], [\"11\", \"11\"],\n             [\"12\", \"12\"]];\nvar MINUTES = [[\"00\", \"00\"], [\"30\", \"30\"]];\nvar MERIDIANS = [[\"am\", \"AM\"], [\"pm\", \"PM\"]];\n\nBlockly.Blocks['datetime_time'] = {\n  /**\n   * Block for datetime day.\n   * @this Blockly.Block\n   */\n    init: function() {\n        this.setColour(DATA_HUE);\n        var dropdown = new Blockly.FieldDropdown([[\"Now\", \"NOW\"]].concat(HOURS), function(opt) {\n            var isNow = (opt == 'NOW');\n            this.sourceBlock_.updateShape_(isNow);\n        });\n        this.appendDummyInput()\n            .appendField(dropdown, 'HOUR');\n        this.setInputsInline(true);\n        this.setOutput(true, 'DatetimeTime');\n        this.setTooltip(\"Returns a time of day\");\n    },\n    mutationToDom: function() {\n        var container = document.createElement('mutation');\n        var isNow = (this.getFieldValue('HOUR').toUpperCase() == 'NOW');\n        container.setAttribute('isnow', isNow);\n        return container;\n    },\n    domToMutation: function(xmlElement) {\n        var isNow = (xmlElement.getAttribute('isnow') == 'true');\n        this.updateShape_(isNow);\n    },\n    updateShape_: function(isNow) {\n        // Add or remove a Value Input.\n        var inputExists = this.getInput('EXTENDED');\n        if (!isNow) {\n            if (!inputExists) {\n                var minuteMenu = new Blockly.FieldDropdown(MINUTES);\n                var meridianMenu = new Blockly.FieldDropdown(MERIDIANS);\n                this.appendDummyInput('EXTENDED')\n                    .appendField(':')\n                    .appendField(minuteMenu, 'MINUTE')\n                    .appendField(meridianMenu, 'MERIDIAN');\n            }\n        } else if (inputExists) {\n            this.removeInput('EXTENDED');\n        }\n    }\n};\n\nvar HOURS_MAP = {\n    '1': 'parking.one()',\n    '2': 'parking.two()',\n    '3': 'parking.three()',\n    '4': 'parking.four()',\n    '5': 'parking.five()',\n    '6': 'parking.six()',\n    '7': 'parking.seven()',\n    '8': 'parking.eight()',\n    '9': 'parking.nine()',\n    '10': 'parking.ten()',\n    '11': 'parking.eleven()',\n    '12': 'parking.twelve()',\n    'NOW': 'parking.now()'\n};\nvar MINUTES_MAP = {\n    '00': 'parking.exactly()',\n    '30': 'parking.half()'\n}\nvar MERIDIANS_MAP = {\n    'AM': 'parking.am()',\n    'PM': 'parking.pm()'\n}\n\nBlockly.Python['datetime_time'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var hour = block.getFieldValue('HOUR');\n    var code;\n    if (hour == \"NOW\") {\n        code = \"parking.now()\";\n    } else {\n        var minute = parseInt(block.getFieldValue('MINUTE'));\n        var meridian = Blockly.Python.quote_(block.getFieldValue('MERIDIAN'));\n        code = 'parking.Time('+hour+','+minute+','+meridian+')';\n    }\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nvar convertDate = function(date) {\n    date = date.slice(0, 3).toLowerCase();\n    switch (date) {\n        case \"mon\": return \"Monday\";\n        case \"tue\": return \"Tuesday\";\n        case \"wed\": return \"Wednesday\";\n        case \"thu\": return \"Thursday\";\n        case \"fri\": return \"Friday\";\n        case \"sat\": return \"Saturday\";\n        case \"sun\": return \"Sunday\";\n        default: return date;\n    }\n}\nvar convertMinute = function(minute) {\n    if (minute < 10) {\n        return \"0\"+minute;\n    } else {\n        return \"\"+minute;\n    }\n}\n\nPythonToBlocks.KNOWN_MODULES['parking'] = {\n    \"today\": [\"datetime_day\", [\"DAY\", \"TODAY\"]],\n    \"day_compare\": [\"datetime_check_day\", \"OP\", \n                            {\"type\": \"variable\", \"mode\": \"value\", \"name\": \"LEFT\"}, \n                            {\"type\": \"mapper\", \"name\": \"VALUE\", \"method\": convertDate}],\n    \"Day\": [\"datetime_day\", {\"type\": \"mapper\", \"name\": \"DAY\", \"method\": convertDate}],\n    \"now\": [\"datetime_time\", [\"HOUR\", \"NOW\"]],\n    \"Time\": [\"datetime_time\", {\"type\": \"integer\", \"name\": \"HOUR\", \"add_mutation\": {\"name\": \"@isnow\", \"value\": \"false\"}}, \n                             {\"type\": \"integer_mapper\", \"name\": \"MINUTE\", \"method\": convertMinute}, \n                             \"MERIDIAN\"],\n    \"time_compare\": [\"datetime_check_time\", \"OP\",\n                            {\"type\": \"variable\", \"mode\": \"value\", \"name\": \"LEFT\"}, \n                            {\"type\": \"integer\", \"name\": \"HOURS\"},\n                            {\"type\": \"integer_mapper\", \"name\": \"MINUTES\", \"method\": convertMinute},\n                            \"MERIDIANS\"]\n};\n\nvar equalityOperators = [\n    [\"==\", \"IS\"],\n    [\"<\", \"BEFORE\"],\n    [\">\", \"AFTER\"],\n    [\"<=\", \"BEFORE_EQUAL\"],\n    [\"=>\", \"AFTER_EQUAL\"],\n    [\"!=\", \"IS_NOT\"]\n];\nvar equalityOperatorsConversions = {\n    \"IS\": \"parking.equal\",\n    \"BEFORE\": \"parking.before\",\n    \"AFTER\": \"parking.after\",\n    \"BEFORE_EQUAL\": \"parking.before_equal\",\n    \"AFTER_EQUAL\": \"parking.after_equal\",\n    \"IS_NOT\": \"parking.not_equal\",\n}\n// FINISH _time and _day\n// Add in numbers and days to KNOWN_MODULES\n\nBlockly.Blocks['datetime_check_day'] = {\n  /**\n   * Block for testing if something contains something.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('LEFT')\n        .setCheck('DatetimeDay')\n        .appendField(new Blockly.FieldDropdown(DAYS), 'VALUE')\n        .appendField(new Blockly.FieldDropdown(equalityOperators), 'OP');\n    \n    this.setInputsInline(false);\n  }\n};\n\nBlockly.Python['datetime_check_day'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var value = Blockly.Python.quote_(block.getFieldValue('VALUE'));\n    var operator = Blockly.Python.quote_(block.getFieldValue('OP'));\n    var left = Blockly.Python.valueToCode(block, 'LEFT', Blockly.Python.ORDER_ATOMIC) || \"___\";\n    var code = \"parking.day_compare(\" + operator + \", \" + left + ', ' + value + \")\";\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Blocks['datetime_check_time'] = {\n  /**\n   * Block for testing if something contains something.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('LEFT')\n        .setCheck('DatetimeTime')\n        .appendField(new Blockly.FieldDropdown(HOURS), 'HOURS')\n        .appendField(':')\n        .appendField(new Blockly.FieldDropdown(MINUTES), 'MINUTES')\n        .appendField(new Blockly.FieldDropdown(MERIDIANS), 'MERIDIANS')\n        .appendField(new Blockly.FieldDropdown(equalityOperators), 'OP');\n    //this.setInputsInline(true);\n  }\n};\n\nBlockly.Python['datetime_check_time'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var hour = parseInt(block.getFieldValue('HOURS'));\n    var minute = parseInt(block.getFieldValue('MINUTES'));\n    var meridian = Blockly.Python.quote_(block.getFieldValue('MERIDIANS'));\n    var operator = Blockly.Python.quote_(block.getFieldValue('OP'));\n    var left = Blockly.Python.valueToCode(block, 'LEFT', Blockly.Python.ORDER_ATOMIC)\n    var code = \"parking.time_compare(\" + operator+\", \"+left + ',' + hour + ',' + minute + ',' +meridian + \")\";\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/3.1a729d75.chunk.js","var DATA_HUE = 210;\n\nvar DAYS = [\n    [\"Monday\", \"MON\"],\n    [\"Tuesday\", \"TUE\"],\n    [\"Wednesday\", \"WED\"],\n    [\"Thursday\", \"THU\"],\n    [\"Friday\", \"FRI\"],\n    [\"Saturday\", \"SAT\"],\n    [\"Sunday\", \"SUN\"]\n  ]\n\nvar DAYS_MAP = {\n        'mon': 'parking.Day(\"MON\")',\n        'tue': 'parking.Day(\"TUE\")',\n        'wed': 'parking.Day(\"WED\")',\n        'thu': 'parking.Day(\"THU\")',\n        'fri': 'parking.Day(\"FRI\")',\n        'sat': 'parking.Day(\"SAT\")',\n        'sun': 'parking.Day(\"SUN\")',\n        'tod': 'parking.today()'\n    };\n\n\nBlockly.Blocks['datetime_day'] = {\n  /**\n   * Block for datetime day.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"%1\",\n      \"args0\": [\n        {\n          \"type\": \"field_dropdown\",\n          \"name\": \"DAY\",\n          \"options\": [[\"Today\", \"TODAY\"]].concat(DAYS)\n        }\n      ],\n      \"output\": \"DatetimeDay\",\n      \"colour\": DATA_HUE,\n      \"tooltip\": \"Returns a day of the week\",\n      \"helpUrl\": \"\"\n    });\n  }\n};\nBlockly.Python['datetime_day'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var operator = DAYS_MAP[block.getFieldValue('DAY').slice(0, 3).toLowerCase()];\n    return [operator, Blockly.Python.ORDER_ATOMIC];\n};\n\nvar HOURS = [[\"1\", \"1\"], [\"2\", \"2\"], [\"3\", \"3\"],\n             [\"4\", \"4\"], [\"5\", \"5\"], [\"6\", \"6\"], [\"7\", \"7\"],\n             [\"8\", \"8\"], [\"9\", \"9\"], [\"10\", \"10\"], [\"11\", \"11\"],\n             [\"12\", \"12\"]];\nvar MINUTES = [[\"00\", \"00\"], [\"30\", \"30\"]];\nvar MERIDIANS = [[\"am\", \"AM\"], [\"pm\", \"PM\"]];\n\nBlockly.Blocks['datetime_time'] = {\n  /**\n   * Block for datetime day.\n   * @this Blockly.Block\n   */\n    init: function() {\n        this.setColour(DATA_HUE);\n        var dropdown = new Blockly.FieldDropdown([[\"Now\", \"NOW\"]].concat(HOURS), function(opt) {\n            var isNow = (opt == 'NOW');\n            this.sourceBlock_.updateShape_(isNow);\n        });\n        this.appendDummyInput()\n            .appendField(dropdown, 'HOUR');\n        this.setInputsInline(true);\n        this.setOutput(true, 'DatetimeTime');\n        this.setTooltip(\"Returns a time of day\");\n    },\n    mutationToDom: function() {\n        var container = document.createElement('mutation');\n        var isNow = (this.getFieldValue('HOUR').toUpperCase() == 'NOW');\n        container.setAttribute('isnow', isNow);\n        return container;\n    },\n    domToMutation: function(xmlElement) {\n        var isNow = (xmlElement.getAttribute('isnow') == 'true');\n        this.updateShape_(isNow);\n    },\n    updateShape_: function(isNow) {\n        // Add or remove a Value Input.\n        var inputExists = this.getInput('EXTENDED');\n        if (!isNow) {\n            if (!inputExists) {\n                var minuteMenu = new Blockly.FieldDropdown(MINUTES);\n                var meridianMenu = new Blockly.FieldDropdown(MERIDIANS);\n                this.appendDummyInput('EXTENDED')\n                    .appendField(':')\n                    .appendField(minuteMenu, 'MINUTE')\n                    .appendField(meridianMenu, 'MERIDIAN');\n            }\n        } else if (inputExists) {\n            this.removeInput('EXTENDED');\n        }\n    }\n};\n\nvar HOURS_MAP = {\n    '1': 'parking.one()',\n    '2': 'parking.two()',\n    '3': 'parking.three()',\n    '4': 'parking.four()',\n    '5': 'parking.five()',\n    '6': 'parking.six()',\n    '7': 'parking.seven()',\n    '8': 'parking.eight()',\n    '9': 'parking.nine()',\n    '10': 'parking.ten()',\n    '11': 'parking.eleven()',\n    '12': 'parking.twelve()',\n    'NOW': 'parking.now()'\n};\nvar MINUTES_MAP = {\n    '00': 'parking.exactly()',\n    '30': 'parking.half()'\n}\nvar MERIDIANS_MAP = {\n    'AM': 'parking.am()',\n    'PM': 'parking.pm()'\n}\n\nBlockly.Python['datetime_time'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var hour = block.getFieldValue('HOUR');\n    var code;\n    if (hour == \"NOW\") {\n        code = \"parking.now()\";\n    } else {\n        var minute = parseInt(block.getFieldValue('MINUTE'));\n        var meridian = Blockly.Python.quote_(block.getFieldValue('MERIDIAN'));\n        code = 'parking.Time('+hour+','+minute+','+meridian+')';\n    }\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\nvar convertDate = function(date) {\n    date = date.slice(0, 3).toLowerCase();\n    switch (date) {\n        case \"mon\": return \"Monday\";\n        case \"tue\": return \"Tuesday\";\n        case \"wed\": return \"Wednesday\";\n        case \"thu\": return \"Thursday\";\n        case \"fri\": return \"Friday\";\n        case \"sat\": return \"Saturday\";\n        case \"sun\": return \"Sunday\";\n        default: return date;\n    }\n}\nvar convertMinute = function(minute) {\n    if (minute < 10) {\n        return \"0\"+minute;\n    } else {\n        return \"\"+minute;\n    }\n}\n\nPythonToBlocks.KNOWN_MODULES['parking'] = {\n    \"today\": [\"datetime_day\", [\"DAY\", \"TODAY\"]],\n    \"day_compare\": [\"datetime_check_day\", \"OP\", \n                            {\"type\": \"variable\", \"mode\": \"value\", \"name\": \"LEFT\"}, \n                            {\"type\": \"mapper\", \"name\": \"VALUE\", \"method\": convertDate}],\n    \"Day\": [\"datetime_day\", {\"type\": \"mapper\", \"name\": \"DAY\", \"method\": convertDate}],\n    \"now\": [\"datetime_time\", [\"HOUR\", \"NOW\"]],\n    \"Time\": [\"datetime_time\", {\"type\": \"integer\", \"name\": \"HOUR\", \"add_mutation\": {\"name\": \"@isnow\", \"value\": \"false\"}}, \n                             {\"type\": \"integer_mapper\", \"name\": \"MINUTE\", \"method\": convertMinute}, \n                             \"MERIDIAN\"],\n    \"time_compare\": [\"datetime_check_time\", \"OP\",\n                            {\"type\": \"variable\", \"mode\": \"value\", \"name\": \"LEFT\"}, \n                            {\"type\": \"integer\", \"name\": \"HOURS\"},\n                            {\"type\": \"integer_mapper\", \"name\": \"MINUTES\", \"method\": convertMinute},\n                            \"MERIDIANS\"]\n};\n\nvar equalityOperators = [\n    [\"==\", \"IS\"],\n    [\"<\", \"BEFORE\"],\n    [\">\", \"AFTER\"],\n    [\"<=\", \"BEFORE_EQUAL\"],\n    [\"=>\", \"AFTER_EQUAL\"],\n    [\"!=\", \"IS_NOT\"]\n];\nvar equalityOperatorsConversions = {\n    \"IS\": \"parking.equal\",\n    \"BEFORE\": \"parking.before\",\n    \"AFTER\": \"parking.after\",\n    \"BEFORE_EQUAL\": \"parking.before_equal\",\n    \"AFTER_EQUAL\": \"parking.after_equal\",\n    \"IS_NOT\": \"parking.not_equal\",\n}\n// FINISH _time and _day\n// Add in numbers and days to KNOWN_MODULES\n\nBlockly.Blocks['datetime_check_day'] = {\n  /**\n   * Block for testing if something contains something.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('LEFT')\n        .setCheck('DatetimeDay')\n        .appendField(new Blockly.FieldDropdown(DAYS), 'VALUE')\n        .appendField(new Blockly.FieldDropdown(equalityOperators), 'OP');\n    \n    this.setInputsInline(false);\n  }\n};\n\nBlockly.Python['datetime_check_day'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var value = Blockly.Python.quote_(block.getFieldValue('VALUE'));\n    var operator = Blockly.Python.quote_(block.getFieldValue('OP'));\n    var left = Blockly.Python.valueToCode(block, 'LEFT', Blockly.Python.ORDER_ATOMIC) || \"___\";\n    var code = \"parking.day_compare(\" + operator + \", \" + left + ', ' + value + \")\";\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\nBlockly.Blocks['datetime_check_time'] = {\n  /**\n   * Block for testing if something contains something.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.setColour(Blockly.Blocks.logic.HUE);\n    this.setOutput(true, 'Boolean');\n    this.appendValueInput('LEFT')\n        .setCheck('DatetimeTime')\n        .appendField(new Blockly.FieldDropdown(HOURS), 'HOURS')\n        .appendField(':')\n        .appendField(new Blockly.FieldDropdown(MINUTES), 'MINUTES')\n        .appendField(new Blockly.FieldDropdown(MERIDIANS), 'MERIDIANS')\n        .appendField(new Blockly.FieldDropdown(equalityOperators), 'OP');\n    //this.setInputsInline(true);\n  }\n};\n\nBlockly.Python['datetime_check_time'] = function(block) {\n    Blockly.Python.definitions_['import_parking'] = 'import parking';\n    var hour = parseInt(block.getFieldValue('HOURS'));\n    var minute = parseInt(block.getFieldValue('MINUTES'));\n    var meridian = Blockly.Python.quote_(block.getFieldValue('MERIDIANS'));\n    var operator = Blockly.Python.quote_(block.getFieldValue('OP'));\n    var left = Blockly.Python.valueToCode(block, 'LEFT', Blockly.Python.ORDER_ATOMIC)\n    var code = \"parking.time_compare(\" + operator+\", \"+left + ',' + hour + ',' + minute + ',' +meridian + \")\";\n    return [code, Blockly.Python.ORDER_ATOMIC];\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/parking.js\n// module id = 286\n// module chunks = 3"],"sourceRoot":""}