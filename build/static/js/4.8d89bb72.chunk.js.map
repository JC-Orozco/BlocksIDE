{"version":3,"sources":["..\\static\\js\\4.8d89bb72.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\loops.js"],"names":["webpackJsonp","285","module","exports","Blockly","Blocks","init","this","jsonInit","message0","args0","type","name","check","inputsInline","previousStatement","nextStatement","colour","loops","HUE","helpUrl","Msg","CONTROLS_FOREACH_HELPURL","appendStatementInput","appendField","CONTROLS_FOREACH_INPUT_DO","setInputsInline","thisBlock","setTooltip","CONTROLS_FOREACH_TOOLTIP","replace","Python","valueToCode","ORDER_RELATIONAL","customContextMenu","block","variable0","argument0","branch","statementToCode","addLoopTrap","id","PASS","JavaScript"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,GCHxBC,QAAAC,OAAA,kBAKAC,KAAA,WACAC,KAAAC,UACAC,SAAA,iCACAC,QAEAC,KAAA,cACAC,KAAA,MACAC,MAAA,OAIAF,KAAA,cACAC,KAAA,OACAC,MAAA,UAGAC,cAAA,EACAC,kBAAA,KACAC,cAAA,KACAC,OAAAb,QAAAC,OAAAa,MAAAC,IACAC,QAAAhB,QAAAiB,IAAAC,2BAEAf,KAAAgB,qBAAA,MACAC,YAAApB,QAAAiB,IAAAI,2BACAlB,KAAAmB,iBAAA,EAEA,IAAAC,GAAApB,IACAA,MAAAqB,WAAA,WACA,MAAAxB,SAAAiB,IAAAQ,yBAAAC,QAAA,KACA1B,QAAA2B,OAAAC,YAAAL,EAAA,MAAAvB,QAAA2B,OAAAE,mBAAA,UAGAC,kBAAA9B,QAAAC,OAAA,aAAA6B,mBAEA9B,QAAA2B,OAAA,0BAAAI,GAEA,GAAAC,GAAAhC,QAAA2B,OAAAC,YAAAG,EAAA,MACA/B,QAAA2B,OAAAE,mBAAA,MACAI,EAAAjC,QAAA2B,OAAAC,YAAAG,EAAA,OACA/B,QAAA2B,OAAAE,mBAAA,MACAK,EAAAlC,QAAA2B,OAAAQ,gBAAAJ,EAAA,KAIA,OAHAG,GAAAlC,QAAA2B,OAAAS,YAAAF,EAAAH,EAAAM,KACArC,QAAA2B,OAAAW,KACA,OAAAN,EAAA,OAAAC,EAAA,MAAAC,GAGAlC,QAAAuC,WAAA,0BAAAR,GAEA,GAAAC,GAAAhC,QAAAuC,WAAAX,YAAAG,EAAA,MACA/B,QAAAuC,WAAAV,mBAAA,MACAI,EAAAjC,QAAAuC,WAAAX,YAAAG,EAAA,OACA/B,QAAAuC,WAAAV,mBAAA,MACAK,EAAAlC,QAAAuC,WAAAJ,gBAAAJ,EAAA,KAIA,OAHAG,GAAAlC,QAAAuC,WAAAH,YAAAF,EAAAH,EAAAM,KACArC,QAAAuC,WAAAD,KACA,QAAAN,EAAA,OAAAC,EAAA,QAA4DC,EAAA","file":"static/js/4.8d89bb72.chunk.js","sourcesContent":["webpackJsonp([4],{\n\n/***/ 285:\n/***/ (function(module, exports) {\n\nBlockly.Blocks['controls_forEach'] = {\n  /**\n   * Block for 'for each' loop.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"for each item %1 in list %2 : \", //Blockly.Msg.CONTROLS_FOREACH_TITLE,\n      \"args0\": [\n        {\n          \"type\": \"input_value\",\n          \"name\": \"VAR\",\n          \"check\": null\n          //\"check\": \"Tuple\"\n        },\n        {\n          \"type\": \"input_value\",\n          \"name\": \"LIST\",\n          \"check\": \"Array\"\n        }\n      ],\n      \"inputsInline\": true,\n      \"previousStatement\": null,\n      \"nextStatement\": null,\n      \"colour\": Blockly.Blocks.loops.HUE,\n      \"helpUrl\": Blockly.Msg.CONTROLS_FOREACH_HELPURL\n    });\n    this.appendStatementInput('DO')\n        .appendField(Blockly.Msg.CONTROLS_FOREACH_INPUT_DO);\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      return Blockly.Msg.CONTROLS_FOREACH_TOOLTIP.replace('%1',\n          Blockly.Python.valueToCode(thisBlock, 'VAR', Blockly.Python.ORDER_RELATIONAL) || '___');\n    });\n  },\n  customContextMenu: Blockly.Blocks['controls_for'].customContextMenu\n};\nBlockly.Python['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.Python.valueToCode(block, 'VAR',\n      Blockly.Python.ORDER_RELATIONAL) || '___';\n  var argument0 = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_RELATIONAL) || '___';\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n};\nBlockly.JavaScript['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.JavaScript.valueToCode(block, 'VAR',\n      Blockly.JavaScript.ORDER_RELATIONAL) || '___';\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\n      Blockly.JavaScript.ORDER_RELATIONAL) || '___';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id) ||\n      Blockly.JavaScript.PASS;\n  var code = 'for (' + variable0 + ' in ' + argument0 + ') {\\n' + branch + '\\n}\\n';\n  return code;\n};\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/4.8d89bb72.chunk.js","Blockly.Blocks['controls_forEach'] = {\n  /**\n   * Block for 'for each' loop.\n   * @this Blockly.Block\n   */\n  init: function() {\n    this.jsonInit({\n      \"message0\": \"for each item %1 in list %2 : \", //Blockly.Msg.CONTROLS_FOREACH_TITLE,\n      \"args0\": [\n        {\n          \"type\": \"input_value\",\n          \"name\": \"VAR\",\n          \"check\": null\n          //\"check\": \"Tuple\"\n        },\n        {\n          \"type\": \"input_value\",\n          \"name\": \"LIST\",\n          \"check\": \"Array\"\n        }\n      ],\n      \"inputsInline\": true,\n      \"previousStatement\": null,\n      \"nextStatement\": null,\n      \"colour\": Blockly.Blocks.loops.HUE,\n      \"helpUrl\": Blockly.Msg.CONTROLS_FOREACH_HELPURL\n    });\n    this.appendStatementInput('DO')\n        .appendField(Blockly.Msg.CONTROLS_FOREACH_INPUT_DO);\n    this.setInputsInline(true);\n    // Assign 'this' to a variable for use in the tooltip closure below.\n    var thisBlock = this;\n    this.setTooltip(function() {\n      return Blockly.Msg.CONTROLS_FOREACH_TOOLTIP.replace('%1',\n          Blockly.Python.valueToCode(thisBlock, 'VAR', Blockly.Python.ORDER_RELATIONAL) || '___');\n    });\n  },\n  customContextMenu: Blockly.Blocks['controls_for'].customContextMenu\n};\nBlockly.Python['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.Python.valueToCode(block, 'VAR',\n      Blockly.Python.ORDER_RELATIONAL) || '___';\n  var argument0 = Blockly.Python.valueToCode(block, 'LIST',\n      Blockly.Python.ORDER_RELATIONAL) || '___';\n  var branch = Blockly.Python.statementToCode(block, 'DO');\n  branch = Blockly.Python.addLoopTrap(branch, block.id) ||\n      Blockly.Python.PASS;\n  var code = 'for ' + variable0 + ' in ' + argument0 + ':\\n' + branch;\n  return code;\n};\nBlockly.JavaScript['controls_forEach'] = function(block) {\n  // For each loop.\n  var variable0 = Blockly.JavaScript.valueToCode(block, 'VAR',\n      Blockly.JavaScript.ORDER_RELATIONAL) || '___';\n  var argument0 = Blockly.JavaScript.valueToCode(block, 'LIST',\n      Blockly.JavaScript.ORDER_RELATIONAL) || '___';\n  var branch = Blockly.JavaScript.statementToCode(block, 'DO');\n  branch = Blockly.JavaScript.addLoopTrap(branch, block.id) ||\n      Blockly.JavaScript.PASS;\n  var code = 'for (' + variable0 + ' in ' + argument0 + ') {\\n' + branch + '\\n}\\n';\n  return code;\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/loops.js\n// module id = 285\n// module chunks = 4"],"sourceRoot":""}