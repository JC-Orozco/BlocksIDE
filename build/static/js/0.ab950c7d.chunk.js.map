{"version":3,"sources":["..\\static\\js\\0.ab950c7d.chunk.js","..\\node_modules\\blockpy\\src\\blockly_blocks\\turtles.js"],"names":["webpackJsonp","289","module","exports","Blockly","Blocks","init","this","appendDummyInput","appendField","setOutput","setColour","setTooltip","setHelpUrl","Python","block","definitions_","ORDER_NONE","PythonToBlocks","KNOWN_MODULES","Turtle","appendValueInput","setCheck","setPreviousStatement","setNextStatement","setInputsInline","valueToCode","ORDER_ATOMIC","KNOWN_ATTR_FUNCTIONS","func","args","keywords","starargs","kwargs","node","length","Error","lineno","COLOR","convert","TURTLE","value","inline","DISTANCE","ANGLE"],"mappings":"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","file":"static/js/0.ab950c7d.chunk.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 289:\n/***/ (function(module, exports) {\n\n/**\n * Turtles!\n */\nBlockly.Blocks['turtle_create'] = {\n  init: function() {\n    this.appendDummyInput()\n        .appendField(\"create new turtle\");\n    this.setOutput(true, 'Turtle');\n    this.setColour(180);\n    this.setTooltip('Creates a new turtle');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_create'] = function(block) {\n    Blockly.Python.definitions_['import_turtle'] = 'import turtle';\n  var code = 'turtle.Turtle()';\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.Python.ORDER_NONE];\n};\nPythonToBlocks.KNOWN_MODULES['turtle'] = {\n    \"Turtle\": [\"turtle_create\"]\n}\n\nBlockly.Blocks['turtle_color'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"COLOR\")\n        .setCheck(null)\n        .appendField(\"color\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setOutput(false);\n    this.setInputsInline(true);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_color'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.color('+color+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['color'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length < 1 || args.length > 2) {\n        throw new Error(\"Incorrect number of arguments to turtle.color!\");\n    }\n    return [block(\"turtle_color\", func.lineno, {}, { \n                    \"COLOR\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_forward'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"DISTANCE\")\n        .setCheck(null)\n        .appendField(\"move forward by\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setInputsInline(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_forward'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var distance = Blockly.Python.valueToCode(block, 'DISTANCE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.forward('+distance+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['forward'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.forward!\");\n    }\n    return [block(\"turtle_forward\", func.lineno, {}, { \n                    \"DISTANCE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_backward'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"DISTANCE\")\n        .setCheck(null)\n        .appendField(\"move backward by\");\n    this.setPreviousStatement(true);\n    this.setInputsInline(true);\n    this.setNextStatement(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_backward'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var distance = Blockly.Python.valueToCode(block, 'DISTANCE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.backward('+distance+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['backward'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.backward!\");\n    }\n    return [block(\"turtle_backward\", func.lineno, {}, { \n                    \"DISTANCE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_left'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"ANGLE\")\n        .setCheck(null)\n        .appendField(\"turn left by\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setInputsInline(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_left'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.left('+angle+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['left'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.left!\");\n    }\n    return [block(\"turtle_left\", func.lineno, {}, { \n                    \"ANGLE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_right'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"ANGLE\")\n        .setCheck(null)\n        .appendField(\"turn right by\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setInputsInline(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_right'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.right('+angle+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['right'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.right!\");\n    }\n    return [block(\"turtle_right\", func.lineno, {}, { \n                    \"ANGLE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.ab950c7d.chunk.js","/**\n * Turtles!\n */\nBlockly.Blocks['turtle_create'] = {\n  init: function() {\n    this.appendDummyInput()\n        .appendField(\"create new turtle\");\n    this.setOutput(true, 'Turtle');\n    this.setColour(180);\n    this.setTooltip('Creates a new turtle');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_create'] = function(block) {\n    Blockly.Python.definitions_['import_turtle'] = 'import turtle';\n  var code = 'turtle.Turtle()';\n  // TODO: Change ORDER_NONE to the correct strength.\n  return [code, Blockly.Python.ORDER_NONE];\n};\nPythonToBlocks.KNOWN_MODULES['turtle'] = {\n    \"Turtle\": [\"turtle_create\"]\n}\n\nBlockly.Blocks['turtle_color'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"COLOR\")\n        .setCheck(null)\n        .appendField(\"color\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setOutput(false);\n    this.setInputsInline(true);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_color'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var color = Blockly.Python.valueToCode(block, 'COLOR', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.color('+color+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['color'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length < 1 || args.length > 2) {\n        throw new Error(\"Incorrect number of arguments to turtle.color!\");\n    }\n    return [block(\"turtle_color\", func.lineno, {}, { \n                    \"COLOR\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_forward'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"DISTANCE\")\n        .setCheck(null)\n        .appendField(\"move forward by\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setInputsInline(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_forward'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var distance = Blockly.Python.valueToCode(block, 'DISTANCE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.forward('+distance+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['forward'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.forward!\");\n    }\n    return [block(\"turtle_forward\", func.lineno, {}, { \n                    \"DISTANCE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_backward'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"DISTANCE\")\n        .setCheck(null)\n        .appendField(\"move backward by\");\n    this.setPreviousStatement(true);\n    this.setInputsInline(true);\n    this.setNextStatement(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_backward'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var distance = Blockly.Python.valueToCode(block, 'DISTANCE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.backward('+distance+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['backward'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.backward!\");\n    }\n    return [block(\"turtle_backward\", func.lineno, {}, { \n                    \"DISTANCE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_left'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"ANGLE\")\n        .setCheck(null)\n        .appendField(\"turn left by\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setInputsInline(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_left'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.left('+angle+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['left'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.left!\");\n    }\n    return [block(\"turtle_left\", func.lineno, {}, { \n                    \"ANGLE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\nBlockly.Blocks['turtle_right'] = {\n  init: function() {\n    this.appendValueInput(\"TURTLE\")\n        .setCheck(\"Turtle\")\n        .appendField(\"make turtle\");\n    this.appendValueInput(\"ANGLE\")\n        .setCheck(null)\n        .appendField(\"turn right by\");\n    this.setPreviousStatement(true);\n    this.setNextStatement(true);\n    this.setInputsInline(true);\n    this.setOutput(false);\n    this.setColour(180);\n    this.setTooltip('');\n    this.setHelpUrl('');\n  }\n};\nBlockly.Python['turtle_right'] = function(block) {\n  var turtle = Blockly.Python.valueToCode(block, 'TURTLE', Blockly.Python.ORDER_ATOMIC);\n  var angle = Blockly.Python.valueToCode(block, 'ANGLE', Blockly.Python.ORDER_ATOMIC);\n  // TODO: Assemble Python into code variable.\n  var code = turtle+'.right('+angle+')\\n';\n  return code;\n};\nPythonToBlocks.KNOWN_ATTR_FUNCTIONS['right'] = function(func, args, keywords, starargs, kwargs, node) {\n    if (args.length != 1) {\n        throw new Error(\"Incorrect number of arguments to turtle.right!\");\n    }\n    return [block(\"turtle_right\", func.lineno, {}, { \n                    \"ANGLE\": this.convert(args[0]),\n                    \"TURTLE\": this.convert(func.value)\n                }, {\"inline\": \"true\"})];\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/blockpy/src/blockly_blocks/turtles.js\n// module id = 289\n// module chunks = 0"],"sourceRoot":""}